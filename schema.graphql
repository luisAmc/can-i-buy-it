type Budget {
  category: String!
  id: ID!
  limit: Float!
}

input CreateTransactionInput {
  amount: Float!
  category: String!
  date: DateTime!
  notes: String!
  type: String!
}

scalar DateTime

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  createTransaction(input: CreateTransactionInput!): Transaction!
  login(input: LoginInput!): User!
  signUp(input: SignUpInput!): User!
}

type Query {
  me: User
  transaction(id: ID!): Transaction!
}

input SignUpInput {
  password: String!
  username: String!
}

type Transaction {
  amount: Float!
  category: String!
  date: DateTime!
  id: ID!
  notes: String
  type: String!
  updatedAt: DateTime!
}

type User {
  budgets: [Budget!]!
  id: ID!
  transactions(limit: Int! = 5, offset: Int! = 0): [Transaction!]!
  transactionsCount: Int!
  username: String!
}